#!/bin/sh
################################################################################
# build_packages                                                               #
#                                                                              #
# Perform basic sanity checks and then create release package set              #
# ##############################################################################
#
# Copyright 2012 Jeffry Johnston 
# 
# This file is part of somagic_easycap
# http://code.google.com/p/easycap-somagic-linux/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

USER="somagic-init somagic-capture"
USERDIR="user"
USERPKG="somagic-easycap"
TOOLS="somagic-extract-firmware"
TOOLSDIR="tools/somagic-extract-firmware"
TOOLSPKG="somagic-easycap-tools"
PKGDIR="packages"

# verify that the version number has been updated for each program and manual
check_version () {
  # input: 1=list of program names, 2=path
  ABSPATH=$(readlink -f "$ROOTDIR/$2")
  for PROGRAM in $1
  do
    # check program
    grep -q \#define\ VERSION\ \""$VERSION"\" "$ABSPATH/$PROGRAM.c"
    if [ $? -ne 0 ] ; then
      echo "Error: Update version of program \"$ABSPATH/$PROGRAM.c\" to \"$VERSION\"."
      exit 1
    fi

    # check manual
    grep -q \""$PROGRAM"\ "$VERSION"\" "$ABSPATH/man/$PROGRAM.1"
    if [ $? -ne 0 ] ; then
      echo "Error: Update version of manual \"$ABSPATH/man/$PROGRAM.1\" to \"$VERSION\"."
      exit 1
    fi
  done

  # check changelog
  grep -q \("$VERSION"\) "$ABSPATH/debian/changelog"
  if [ $? -ne 0 ] ; then
    echo "Error: Add entry to changelog \"$ABSPATH/debian/changelog\" for \"$VERSION\"."
    exit 1
  fi
}

# perform build for a package
build_package () {
  # input: 1=package name, 2=package path
  ABSPATH=$(readlink -f "$ROOTDIR/$2")
  cd "$ABSPATH"
  if [ $? -ne 0 ] ; then
    echo "Failed to change directory to \"$ABSPATH\"."
    exit 1
  fi  
  debuild -us -uc
  rm ../"$1"\_"$VERSION"\_"$ARCH".build
  rm ../"$1"\_"$VERSION"\_"$ARCH".changes
  rm ../"$1"\_"$VERSION".dsc
  mkdir -p "$ROOTDIR/$PKGDIR"
  mv ../"$1"\_"$VERSION"\_"$ARCH".deb "$ROOTDIR/$PKGDIR"
  mv ../"$1"\_"$VERSION".tar.gz "$ROOTDIR/$PKGDIR"
}

# parse command line arguments
VERSION=$1
if [ "" = "$VERSION" ] ; then
  echo "Usage: $0 VERSION"
  echo "Example: $0 1.0"
  exit 1
fi

# get architecture
ARCH=$(dpkg --print-architecture)

# verify current directory
CURDIR=$(readlink -f $PWD)
ROOTDIR=$(readlink -f $(dirname $0))
if [ "$CURDIR" != "$ROOTDIR" ] ; then
  echo "Error: Run this script from the root of the easycap-somagic-linux git tree."
  exit 1
fi

# verify git tree is committed and up-to-date
git diff --exit-code
if [ $? -ne 0 ] ; then
  echo "Error: There are uncommitted local changes. Use \"git commit -a\" and \"git push\"."
  exit 1
fi
git pull
if [ $? -ne 0 ] ; then
  echo "Error: There was a problem updating the source tree."
  exit 1
fi

# check versions
check_version "$USER" "$USERDIR" 
check_version "$TOOLS" "$TOOLSDIR"

# build packages
build_package "$USERPKG" "$USERDIR"
build_package "$TOOLSPKG" "$TOOLSDIR"

