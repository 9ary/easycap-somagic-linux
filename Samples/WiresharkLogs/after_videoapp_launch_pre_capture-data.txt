
// ------------------- Transfer for init1 ------------------------------------//
Request (Dev2Host, endpoint 0x80, Value 0x0001)
Reply 0x01 0x07

[...] Lots of sending 64 bytes to request 0x01, value 0x0005 Of device

End by sending Value 0x0007, with data 0x0007 (len 2Bytes)

// ------------------- Transfer for init2 ------------------------------------//
Send the following data with URB_Value = 0x000b

 c5 c6  c7 c8 c9 ca cb cc cd ce cf d0 d1  // (Low Byte of somagic_sram where data is stored)
-----------------------------------------
(0b 00) 00 82 01 00 3a 80 80 14 1b 89 00  ---- Send 0x80 to Port 0x3a (?? PortA DataDirection Register - Pin7 Output ??)
(0b 00) 00 82 01 00 3b 00 80 14 1b 89 00  ---- Send 0x00 to Port 0x3b (?? PortA DataRegister = 0x00 ??)
(0b 00) 00 82 01 00 34 01 80 14 1b 89 00  ---- Send 0x01 to Port 0x34 (?? PortC DataDirection Register - Pin1 Output ??)
(0b 00) 00 82 01 00 35 00 80 14 1b 89 00  ---- Send 0x00 to Port 0x35 (?? PortC DataRegister = 0x00 ??)





// ------------------- Setup after start of video capture application --------//
Send to request 0x01, value 0x000b

(0b 00) 20 82 01 30 80 89 24 ad 54 80 00 --- Read value of port 0x3080 into hardcoded address : 0x019e
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 00) 20 82 01 30 80 80 24 ad 54 80 00

(0b 00) 00 82 01 00 34 11 eb 91 9c b8 47
(0b 00) 00 82 01 00 35 11 eb 91 9c b8 47

(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 00 22 44 6e 80 08

(0b 00) 00 82 01 17 40 00 00 00 00 00 5c

(0b 00) 00 82 01 00 3a 80 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 3b 00 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 34 01 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 35 00 ec 4b 2f b9 7e


(0b 00) 20 82 01 30 80 89 24 ad 54 80 00 --- Read value of port 0x3080 into hardcoded address : 0x019e
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 00) 20 82 01 30 80 80 24 ad 54 80 00

(0b 00) 00 82 01 00 34 11 eb 91 9c b8 47
(0b 00) 00 82 01 00 35 11 eb 91 9c b8 47

(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 00 22 44 6e 80 08

(0b 00) 00 82 01 17 40 00 00 00 00 00 5c

(0b 00) 00 82 01 00 3a 80 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 3b 00 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 34 01 ec 4b 2f b9 7e
(0b 00) 00 82 01 00 35 00 ec 4b 2f b9 7e




// ------------------- Capture setup -----------------------------------------//
Send to request 0x01, value 0x000b
First Lots of the previous block!

// This is new:
(0b 00) 00 82 01 17 40 00 b0 4b 2f b9 fe

(0b 00) 00 82 01 00 3a 80 70 2f 3b e1 7e
(0b 00) 00 82 01 00 3b 00 70 2f 3b e1 7e
(0b 00) 00 82 01 00 34 01 70 2f 3b e1 7e
(0b 00) 00 82 01 00 35 00 70 2f 3b e1 7e

(0b 00) 20 82 01 30 80 89 24 ad 54 80 00
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 00) 20 82 01 30 80 80 24 ad 54 80 00

(0b 00) 00 82 01 00 34 11 eb 91 9c b8 47
(0b 00) 00 82 01 00 35 11 eb 91 9c b8 47

(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3a 80 22 44 6e 80 08
(0b 00) 00 82 01 00 3b 00 22 44 6e 80 08

OBS new header (still sending to 0x000b):
// Looks like SAA7113 Config!
// 0x4A Is the I2C Write address of the saa7113 Chip
               [   ACK-s  ]
// S? - SLVw - ?? - ?? - ?? - SUBa - VAL - ?? - ?? - ?? - ?? - ?? - ??
// 0b -  4a  - c0 - 01 - 01 -  01  -  08 - 89 - ed - a6 - 54 - 80 - 18


 c5 c6  c7 c8 c9 ca cb cc cd ce cf d0 d1  // (Low Byte of somagic_sram where data is stored)
-----------------------------------------
(0b 4a) c0 01 01 01 08 89 ed a6 54 80 18
(0b 4a) c0 01 01 02 c7 ff 02 01 00 00 10
(0b 4a) c0 01 01 03 33 ff 02 01 00 00 10
(0b 4a) c0 01 01 04 00 ba 02 01 00 00 10
(0b 4a) c0 01 01 05 00 ba 02 01 00 00 10
(0b 4a) c0 01 01 06 e9 ff 02 01 00 00 10
(0b 4a) c0 01 01 07 0d ba 02 01 00 00 10
(0b 4a) c0 01 01 08 98 ba 02 01 00 00 10
(0b 4a) c0 01 01 09 01 ba 02 01 00 00 10
(0b 4a) c0 01 01 0a 80 ff 02 01 00 00 10
(0b 4a) c0 01 01 0b 40 ff 02 01 00 00 10
(0b 4a) c0 01 01 0c 40 ff 02 01 00 00 10
(0b 4a) c0 01 01 0d 00 ff 02 01 00 00 10
(0b 4a) c0 01 01 0e 81 ba 02 01 00 00 10
////////// --- WHAT??? --------------///
(0b 4a) c0 01 01 0e 81 ff fc 4d 54 80 cc
(0b 4a) c0 01 01 0e 81 ff 02 01 00 00 10
(0b 4a) c0 01 01 0e 81 ff fc 4d 54 80 cc
(0b 4a) c0 01 01 0e 81 ff 02 01 00 00 10
(0b 4a) c0 01 01 0e 81 ba 01 01 00 00 10
(0b 4a) c0 01 01 0e 81 ff 02 01 00 00 10
(0b 4a) c0 01 01 0e 81 ff fc 4d 54 80 cc
(0b 4a) c0 01 01 0e 81 ff 02 01 00 00 10
///------------ DONE ??? ------------///
(0b 4a) c0 01 01 0f 2a 00 02 01 00 00 10
(0b 4a) c0 01 01 10 40 ba 02 01 00 00 10
(0b 4a) c0 01 01 11 0c ff 02 01 00 00 10
(0b 4a) c0 01 01 12 01 ba 02 01 00 00 10
(0b 4a) c0 01 01 13 80 ff 02 01 00 00 10
(0b 4a) c0 01 01 14 00 ff fc 4d 54 80 cc
(0b 4a) c0 01 01 15 00 ff 02 01 00 00 10
(0b 4a) c0 01 01 16 00 ff 02 01 00 00 10
(0b 4a) c0 01 01 17 00 ff 02 01 00 00 10
(0b 4a) c0 01 01 40 02 ff 02 01 00 00 10
(0b 4a) c0 01 01 58 00 ba 02 01 00 00 10
(0b 4a) c0 01 01 59 54 ba 02 01 00 00 10
(0b 4a) c0 01 01 5a 07 ba 02 01 00 00 10
(0b 4a) c0 01 01 5b 03 ba 02 01 00 00 10
(0b 4a) c0 01 01 5e 00 ff 02 01 00 00 10
/// ------------- Restart??? ---------//
(0b 4a) c0 01 01 02 c9 b9 00 00 00 00 d4

(0b 4a) c0 01 01 0a 80 89 18 93 9c b8 00
(0b 4a) c0 01 01 0b 40 89 18 93 9c b8 00
(0b 4a) c0 01 01 0d 00 89 18 93 9c b8 00
(0b 4a) c0 01 01 0c 40 89 18 93 9c b8 00

(0b 4a) c0 01 01 09 01 00 00 90 7b 89 18

(0b 4a) c0 01 01 02 c0 89 f8 4b 2f b9 60
(0b 4a) c0 01 01 0e 01 89 f8 4b 2f b9 60

/// ------------- NEW HEADER ---------//

 c5 c6  c7 c8 c9 ca cb cc cd ce cf d0 d1  // (Low Byte of somagic_sram where data is stored)
-----------------------------------------
(0b 4a) 84 00 01 40 00 00 22 44 6e 80 08 // 0x1785 = 0x40

(0b 4a) a0 00 01 89 2f b9 60 e3 66 89 20
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 4a) a0 00 01 00 2f b9 60 e3 66 89 20

(0b 4a) 84 00 01 5b 00 00 22 44 6e 80 08

(0b 4a) a0 00 01 b8 00 00 22 44 6e 80 08
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 4a) a0 00 01 00 00 00 22 44 6e 80 08

(0b 4a) 84 00 01 10 00 00 22 44 6e 80 08
(0b 4a) a0 00 01 9d 00 00 22 44 6e 80 08
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 4a) a0 00 01 40 00 00 22 44 6e 80 08

/// ------------ SAA7113 again?? -----//
(0b 4a) c0 01 01 5a 07 80 08 00 00 00 46
(0b 4a) c0 01 01 59 54 80 08 00 00 00 46
(0b 4a) c0 01 01 5b 83 80 08 00 00 00 46
(0b 4a) c0 01 01 10 48 80 08 00 00 00 46
(0b 4a) c0 01 01 41 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 42 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 43 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 44 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 45 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 46 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 47 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 48 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 49 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4a 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4b 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4c 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4d 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4e 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 4f 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 50 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 51 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 52 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 53 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 54 77 ff 02 01 00 00 10
(0b 4a) c0 01 01 55 77 ff 02 01 00 00 10

(0b 4a) c0 01 01 0a 80 01 01 55 77 ff 02
(0b 4a) c0 01 01 0b 40 01 01 55 77 ff 02
(0b 4a) c0 01 01 0d 00 01 01 55 77 ff 02
(0b 4a) c0 01 01 0c 40 01 01 55 77 ff 02

(0b 4a) c0 01 01 09 01 00 00 90 7b 89 18

(0b 4a) 20 82 01 30 80 89 11 b1 54 80 00
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 4a) 20 82 01 30 80 80 11 b1 54 80 00

/// ------------ SAA7113 DONE ?? -----//
(0b 00) 00 82 01 17 40 00 00 00 00 00 f0
(0b 00) 20 82 01 30 80 89 41 ad 54 80 00
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 00) 20 82 01 30 80 80 41 ad 54 80 00

(0b 00) 00 82 01 17 40 00 00 00 00 00 54
(0b 00) 20 82 01 30 80 89 00 90 7b 89 14
(From dev after next request to endpoint 0x80, value 0x000b)
(0b 00) 20 82 01 30 80 80 00 90 7b 89 14

/// -------------- WHAT NOW? ---------//
Send two bytes to 0x0001 (Request 0x01, value 0x01)
01 05 // Set 0x02E7 = 0x05										// Setup ISOCHRONOUS interface?

Get Descriptor
Set Interface on IF 0x01
	bAlternateSetting : 2; 											// I Guess this enables the ISOCHRONOUS interface

Send 13 bytes to Request 0x01, value 0x000b, Type = Vendor!
(0b 00) 00 82 01 17 40 1d 00 0d db ba 58
(0b 00) 00 82 01 17 40 00 02 01 00 00 10

Then lots of ISOCHRONOUS-OUT from host,
until device responds with images!
